#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34014
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnLib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-OnLib")]
	public partial class DbModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertAspNetRoles(AspNetRoles instance);
    partial void UpdateAspNetRoles(AspNetRoles instance);
    partial void DeleteAspNetRoles(AspNetRoles instance);
    partial void InsertAspNetUserClaims(AspNetUserClaims instance);
    partial void UpdateAspNetUserClaims(AspNetUserClaims instance);
    partial void DeleteAspNetUserClaims(AspNetUserClaims instance);
    partial void InsertAspNetUserLogins(AspNetUserLogins instance);
    partial void UpdateAspNetUserLogins(AspNetUserLogins instance);
    partial void DeleteAspNetUserLogins(AspNetUserLogins instance);
    partial void InsertAspNetUserRoles(AspNetUserRoles instance);
    partial void UpdateAspNetUserRoles(AspNetUserRoles instance);
    partial void DeleteAspNetUserRoles(AspNetUserRoles instance);
    partial void InsertAspNetUsers(AspNetUsers instance);
    partial void UpdateAspNetUsers(AspNetUsers instance);
    partial void DeleteAspNetUsers(AspNetUsers instance);
    partial void InsertAutors(Autors instance);
    partial void UpdateAutors(Autors instance);
    partial void DeleteAutors(Autors instance);
    partial void InsertGenres(Genres instance);
    partial void UpdateGenres(Genres instance);
    partial void DeleteGenres(Genres instance);
    partial void InsertKopies(Kopies instance);
    partial void UpdateKopies(Kopies instance);
    partial void DeleteKopies(Kopies instance);
    partial void InsertLeihes(Leihes instance);
    partial void UpdateLeihes(Leihes instance);
    partial void DeleteLeihes(Leihes instance);
    partial void InsertTitels(Titels instance);
    partial void UpdateTitels(Titels instance);
    partial void DeleteTitels(Titels instance);
    partial void InsertTyps(Typs instance);
    partial void UpdateTyps(Typs instance);
    partial void DeleteTyps(Typs instance);
    #endregion
		
		public DbModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspNetRoles> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRoles>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaims> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaims>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogins> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogins>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRoles> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRoles>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUsers> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUsers>();
			}
		}
		
		public System.Data.Linq.Table<Autors> Autors
		{
			get
			{
				return this.GetTable<Autors>();
			}
		}
		
		public System.Data.Linq.Table<Genres> Genres
		{
			get
			{
				return this.GetTable<Genres>();
			}
		}
		
		public System.Data.Linq.Table<Kopies> Kopies
		{
			get
			{
				return this.GetTable<Kopies>();
			}
		}
		
		public System.Data.Linq.Table<Leihes> Leihes
		{
			get
			{
				return this.GetTable<Leihes>();
			}
		}
		
		public System.Data.Linq.Table<Titels> Titels
		{
			get
			{
				return this.GetTable<Titels>();
			}
		}
		
		public System.Data.Linq.Table<Typs> Typs
		{
			get
			{
				return this.GetTable<Typs>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRoles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRoles> _AspNetUserRoles;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRoles()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRoles>(new Action<AspNetUserRoles>(this.attach_AspNetUserRoles), new Action<AspNetUserRoles>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRoles_AspNetUserRoles", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRoles> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRoles = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRoles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaims : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaims()
		{
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_AspNetUserClaims", Storage="_AspNetUsers", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogins : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogins()
		{
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_AspNetUserLogins", Storage="_AspNetUsers", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRoles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRoles> _AspNetRoles;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRoles()
		{
			this._AspNetRoles = default(EntityRef<AspNetRoles>);
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRoles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRoles_AspNetUserRoles", Storage="_AspNetRoles", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRoles AspNetRoles
		{
			get
			{
				return this._AspNetRoles.Entity;
			}
			set
			{
				AspNetRoles previousValue = this._AspNetRoles.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRoles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRoles.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRoles.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRoles");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_AspNetUserRoles", Storage="_AspNetUsers", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUsers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private string _Vorname;
		
		private string _Nachname;
		
		private string _Strasse;
		
		private int _HausNr;
		
		private int _PLZ;
		
		private string _Ort;
		
		private string _Land;
		
		private System.DateTime _Geburtstag;
		
		private System.DateTime _RegistrationDate;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private EntitySet<AspNetUserClaims> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogins> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRoles> _AspNetUserRoles;
		
		private EntitySet<Kopies> _Kopies;
		
		private EntitySet<Leihes> _Leihes;
		
		private EntitySet<Titels> _Titels;
		
		private EntitySet<Titels> _Titels1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnVornameChanging(string value);
    partial void OnVornameChanged();
    partial void OnNachnameChanging(string value);
    partial void OnNachnameChanged();
    partial void OnStrasseChanging(string value);
    partial void OnStrasseChanged();
    partial void OnHausNrChanging(int value);
    partial void OnHausNrChanged();
    partial void OnPLZChanging(int value);
    partial void OnPLZChanged();
    partial void OnOrtChanging(string value);
    partial void OnOrtChanged();
    partial void OnLandChanging(string value);
    partial void OnLandChanged();
    partial void OnGeburtstagChanging(System.DateTime value);
    partial void OnGeburtstagChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public AspNetUsers()
		{
			this._AspNetUserClaims = new EntitySet<AspNetUserClaims>(new Action<AspNetUserClaims>(this.attach_AspNetUserClaims), new Action<AspNetUserClaims>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogins>(new Action<AspNetUserLogins>(this.attach_AspNetUserLogins), new Action<AspNetUserLogins>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRoles>(new Action<AspNetUserRoles>(this.attach_AspNetUserRoles), new Action<AspNetUserRoles>(this.detach_AspNetUserRoles));
			this._Kopies = new EntitySet<Kopies>(new Action<Kopies>(this.attach_Kopies), new Action<Kopies>(this.detach_Kopies));
			this._Leihes = new EntitySet<Leihes>(new Action<Leihes>(this.attach_Leihes), new Action<Leihes>(this.detach_Leihes));
			this._Titels = new EntitySet<Titels>(new Action<Titels>(this.attach_Titels), new Action<Titels>(this.detach_Titels));
			this._Titels1 = new EntitySet<Titels>(new Action<Titels>(this.attach_Titels1), new Action<Titels>(this.detach_Titels1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vorname", DbType="NVarChar(MAX)")]
		public string Vorname
		{
			get
			{
				return this._Vorname;
			}
			set
			{
				if ((this._Vorname != value))
				{
					this.OnVornameChanging(value);
					this.SendPropertyChanging();
					this._Vorname = value;
					this.SendPropertyChanged("Vorname");
					this.OnVornameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nachname", DbType="NVarChar(MAX)")]
		public string Nachname
		{
			get
			{
				return this._Nachname;
			}
			set
			{
				if ((this._Nachname != value))
				{
					this.OnNachnameChanging(value);
					this.SendPropertyChanging();
					this._Nachname = value;
					this.SendPropertyChanged("Nachname");
					this.OnNachnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strasse", DbType="NVarChar(MAX)")]
		public string Strasse
		{
			get
			{
				return this._Strasse;
			}
			set
			{
				if ((this._Strasse != value))
				{
					this.OnStrasseChanging(value);
					this.SendPropertyChanging();
					this._Strasse = value;
					this.SendPropertyChanged("Strasse");
					this.OnStrasseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HausNr", DbType="Int NOT NULL")]
		public int HausNr
		{
			get
			{
				return this._HausNr;
			}
			set
			{
				if ((this._HausNr != value))
				{
					this.OnHausNrChanging(value);
					this.SendPropertyChanging();
					this._HausNr = value;
					this.SendPropertyChanged("HausNr");
					this.OnHausNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLZ", DbType="Int NOT NULL")]
		public int PLZ
		{
			get
			{
				return this._PLZ;
			}
			set
			{
				if ((this._PLZ != value))
				{
					this.OnPLZChanging(value);
					this.SendPropertyChanging();
					this._PLZ = value;
					this.SendPropertyChanged("PLZ");
					this.OnPLZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ort", DbType="NVarChar(MAX)")]
		public string Ort
		{
			get
			{
				return this._Ort;
			}
			set
			{
				if ((this._Ort != value))
				{
					this.OnOrtChanging(value);
					this.SendPropertyChanging();
					this._Ort = value;
					this.SendPropertyChanged("Ort");
					this.OnOrtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Land", DbType="NVarChar(MAX)")]
		public string Land
		{
			get
			{
				return this._Land;
			}
			set
			{
				if ((this._Land != value))
				{
					this.OnLandChanging(value);
					this.SendPropertyChanging();
					this._Land = value;
					this.SendPropertyChanged("Land");
					this.OnLandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Geburtstag", DbType="DateTime NOT NULL")]
		public System.DateTime Geburtstag
		{
			get
			{
				return this._Geburtstag;
			}
			set
			{
				if ((this._Geburtstag != value))
				{
					this.OnGeburtstagChanging(value);
					this.SendPropertyChanging();
					this._Geburtstag = value;
					this.SendPropertyChanged("Geburtstag");
					this.OnGeburtstagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_AspNetUserClaims", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaims> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_AspNetUserLogins", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogins> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_AspNetUserRoles", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRoles> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Kopies", Storage="_Kopies", ThisKey="Id", OtherKey="UserProfile_Id")]
		public EntitySet<Kopies> Kopies
		{
			get
			{
				return this._Kopies;
			}
			set
			{
				this._Kopies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Leihes", Storage="_Leihes", ThisKey="Id", OtherKey="UserProfile_Id")]
		public EntitySet<Leihes> Leihes
		{
			get
			{
				return this._Leihes;
			}
			set
			{
				this._Leihes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Titels", Storage="_Titels", ThisKey="Id", OtherKey="CreatedBy_Id")]
		public EntitySet<Titels> Titels
		{
			get
			{
				return this._Titels;
			}
			set
			{
				this._Titels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Titels1", Storage="_Titels1", ThisKey="Id", OtherKey="LastModifiedBy_Id")]
		public EntitySet<Titels> Titels1
		{
			get
			{
				return this._Titels1;
			}
			set
			{
				this._Titels1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaims entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaims entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogins entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogins entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
		
		private void attach_Kopies(Kopies entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_Kopies(Kopies entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
		
		private void attach_Leihes(Leihes entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_Leihes(Leihes entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
		
		private void attach_Titels(Titels entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = this;
		}
		
		private void detach_Titels(Titels entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers = null;
		}
		
		private void attach_Titels1(Titels entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers1 = this;
		}
		
		private void detach_Titels1(Titels entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUsers1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Autors")]
	public partial class Autors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AutorId;
		
		private string _Nachname;
		
		private string _Vorname;
		
		private string _Sonstiges;
		
		private EntitySet<Titels> _Titels;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAutorIdChanging(int value);
    partial void OnAutorIdChanged();
    partial void OnNachnameChanging(string value);
    partial void OnNachnameChanged();
    partial void OnVornameChanging(string value);
    partial void OnVornameChanged();
    partial void OnSonstigesChanging(string value);
    partial void OnSonstigesChanged();
    #endregion
		
		public Autors()
		{
			this._Titels = new EntitySet<Titels>(new Action<Titels>(this.attach_Titels), new Action<Titels>(this.detach_Titels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AutorId
		{
			get
			{
				return this._AutorId;
			}
			set
			{
				if ((this._AutorId != value))
				{
					this.OnAutorIdChanging(value);
					this.SendPropertyChanging();
					this._AutorId = value;
					this.SendPropertyChanged("AutorId");
					this.OnAutorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nachname", DbType="NVarChar(MAX)")]
		public string Nachname
		{
			get
			{
				return this._Nachname;
			}
			set
			{
				if ((this._Nachname != value))
				{
					this.OnNachnameChanging(value);
					this.SendPropertyChanging();
					this._Nachname = value;
					this.SendPropertyChanged("Nachname");
					this.OnNachnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vorname", DbType="NVarChar(MAX)")]
		public string Vorname
		{
			get
			{
				return this._Vorname;
			}
			set
			{
				if ((this._Vorname != value))
				{
					this.OnVornameChanging(value);
					this.SendPropertyChanging();
					this._Vorname = value;
					this.SendPropertyChanged("Vorname");
					this.OnVornameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sonstiges", DbType="NVarChar(MAX)")]
		public string Sonstiges
		{
			get
			{
				return this._Sonstiges;
			}
			set
			{
				if ((this._Sonstiges != value))
				{
					this.OnSonstigesChanging(value);
					this.SendPropertyChanging();
					this._Sonstiges = value;
					this.SendPropertyChanged("Sonstiges");
					this.OnSonstigesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Autors_Titels", Storage="_Titels", ThisKey="AutorId", OtherKey="AutorId")]
		public EntitySet<Titels> Titels
		{
			get
			{
				return this._Titels;
			}
			set
			{
				this._Titels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Titels(Titels entity)
		{
			this.SendPropertyChanging();
			entity.Autors = this;
		}
		
		private void detach_Titels(Titels entity)
		{
			this.SendPropertyChanging();
			entity.Autors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genres")]
	public partial class Genres : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenreId;
		
		private string _Name;
		
		private EntitySet<Titels> _Titels;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIdChanging(int value);
    partial void OnGenreIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Genres()
		{
			this._Titels = new EntitySet<Titels>(new Action<Titels>(this.attach_Titels), new Action<Titels>(this.detach_Titels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenreId
		{
			get
			{
				return this._GenreId;
			}
			set
			{
				if ((this._GenreId != value))
				{
					this.OnGenreIdChanging(value);
					this.SendPropertyChanging();
					this._GenreId = value;
					this.SendPropertyChanged("GenreId");
					this.OnGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genres_Titels", Storage="_Titels", ThisKey="GenreId", OtherKey="GenreId")]
		public EntitySet<Titels> Titels
		{
			get
			{
				return this._Titels;
			}
			set
			{
				this._Titels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Titels(Titels entity)
		{
			this.SendPropertyChanging();
			entity.Genres = this;
		}
		
		private void detach_Titels(Titels entity)
		{
			this.SendPropertyChanging();
			entity.Genres = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kopies")]
	public partial class Kopies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TitelId;
		
		private string _Typ;
		
		private string _Ausgabe;
		
		private string _Qualitaet;
		
		private string _UserProfile_Id;
		
		private bool _Available;
		
		private EntitySet<Leihes> _Leihes;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
		private EntityRef<Titels> _Titels;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitelIdChanging(int value);
    partial void OnTitelIdChanged();
    partial void OnTypChanging(string value);
    partial void OnTypChanged();
    partial void OnAusgabeChanging(string value);
    partial void OnAusgabeChanged();
    partial void OnQualitaetChanging(string value);
    partial void OnQualitaetChanged();
    partial void OnUserProfile_IdChanging(string value);
    partial void OnUserProfile_IdChanged();
    partial void OnAvailableChanging(bool value);
    partial void OnAvailableChanged();
    #endregion
		
		public Kopies()
		{
			this._Leihes = new EntitySet<Leihes>(new Action<Leihes>(this.attach_Leihes), new Action<Leihes>(this.detach_Leihes));
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			this._Titels = default(EntityRef<Titels>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitelId", DbType="Int NOT NULL")]
		public int TitelId
		{
			get
			{
				return this._TitelId;
			}
			set
			{
				if ((this._TitelId != value))
				{
					if (this._Titels.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitelIdChanging(value);
					this.SendPropertyChanging();
					this._TitelId = value;
					this.SendPropertyChanged("TitelId");
					this.OnTitelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Typ", DbType="NVarChar(MAX)")]
		public string Typ
		{
			get
			{
				return this._Typ;
			}
			set
			{
				if ((this._Typ != value))
				{
					this.OnTypChanging(value);
					this.SendPropertyChanging();
					this._Typ = value;
					this.SendPropertyChanged("Typ");
					this.OnTypChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ausgabe", DbType="NVarChar(MAX)")]
		public string Ausgabe
		{
			get
			{
				return this._Ausgabe;
			}
			set
			{
				if ((this._Ausgabe != value))
				{
					this.OnAusgabeChanging(value);
					this.SendPropertyChanging();
					this._Ausgabe = value;
					this.SendPropertyChanged("Ausgabe");
					this.OnAusgabeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qualitaet", DbType="NVarChar(MAX)")]
		public string Qualitaet
		{
			get
			{
				return this._Qualitaet;
			}
			set
			{
				if ((this._Qualitaet != value))
				{
					this.OnQualitaetChanging(value);
					this.SendPropertyChanging();
					this._Qualitaet = value;
					this.SendPropertyChanged("Qualitaet");
					this.OnQualitaetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProfile_Id", DbType="NVarChar(128)")]
		public string UserProfile_Id
		{
			get
			{
				return this._UserProfile_Id;
			}
			set
			{
				if ((this._UserProfile_Id != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserProfile_IdChanging(value);
					this.SendPropertyChanging();
					this._UserProfile_Id = value;
					this.SendPropertyChanged("UserProfile_Id");
					this.OnUserProfile_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="Bit NOT NULL")]
		public bool Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kopies_Leihes", Storage="_Leihes", ThisKey="Id", OtherKey="KopieId")]
		public EntitySet<Leihes> Leihes
		{
			get
			{
				return this._Leihes;
			}
			set
			{
				this._Leihes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Kopies", Storage="_AspNetUsers", ThisKey="UserProfile_Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.Kopies.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.Kopies.Add(this);
						this._UserProfile_Id = value.Id;
					}
					else
					{
						this._UserProfile_Id = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Titels_Kopies", Storage="_Titels", ThisKey="TitelId", OtherKey="TitelId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Titels Titels
		{
			get
			{
				return this._Titels.Entity;
			}
			set
			{
				Titels previousValue = this._Titels.Entity;
				if (((previousValue != value) 
							|| (this._Titels.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Titels.Entity = null;
						previousValue.Kopies.Remove(this);
					}
					this._Titels.Entity = value;
					if ((value != null))
					{
						value.Kopies.Add(this);
						this._TitelId = value.TitelId;
					}
					else
					{
						this._TitelId = default(int);
					}
					this.SendPropertyChanged("Titels");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Leihes(Leihes entity)
		{
			this.SendPropertyChanging();
			entity.Kopies = this;
		}
		
		private void detach_Leihes(Leihes entity)
		{
			this.SendPropertyChanging();
			entity.Kopies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Leihes")]
	public partial class Leihes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeiheId;
		
		private int _KopieId;
		
		private System.DateTime _Ausgeliehen;
		
		private System.DateTime _Rueckgabe;
		
		private bool _Zurueck;
		
		private string _UserProfile_Id;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
		private EntityRef<Kopies> _Kopies;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeiheIdChanging(int value);
    partial void OnLeiheIdChanged();
    partial void OnKopieIdChanging(int value);
    partial void OnKopieIdChanged();
    partial void OnAusgeliehenChanging(System.DateTime value);
    partial void OnAusgeliehenChanged();
    partial void OnRueckgabeChanging(System.DateTime value);
    partial void OnRueckgabeChanged();
    partial void OnZurueckChanging(bool value);
    partial void OnZurueckChanged();
    partial void OnUserProfile_IdChanging(string value);
    partial void OnUserProfile_IdChanged();
    #endregion
		
		public Leihes()
		{
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			this._Kopies = default(EntityRef<Kopies>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeiheId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeiheId
		{
			get
			{
				return this._LeiheId;
			}
			set
			{
				if ((this._LeiheId != value))
				{
					this.OnLeiheIdChanging(value);
					this.SendPropertyChanging();
					this._LeiheId = value;
					this.SendPropertyChanged("LeiheId");
					this.OnLeiheIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KopieId", DbType="Int NOT NULL")]
		public int KopieId
		{
			get
			{
				return this._KopieId;
			}
			set
			{
				if ((this._KopieId != value))
				{
					if (this._Kopies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKopieIdChanging(value);
					this.SendPropertyChanging();
					this._KopieId = value;
					this.SendPropertyChanged("KopieId");
					this.OnKopieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ausgeliehen", DbType="DateTime NOT NULL")]
		public System.DateTime Ausgeliehen
		{
			get
			{
				return this._Ausgeliehen;
			}
			set
			{
				if ((this._Ausgeliehen != value))
				{
					this.OnAusgeliehenChanging(value);
					this.SendPropertyChanging();
					this._Ausgeliehen = value;
					this.SendPropertyChanged("Ausgeliehen");
					this.OnAusgeliehenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rueckgabe", DbType="DateTime NOT NULL")]
		public System.DateTime Rueckgabe
		{
			get
			{
				return this._Rueckgabe;
			}
			set
			{
				if ((this._Rueckgabe != value))
				{
					this.OnRueckgabeChanging(value);
					this.SendPropertyChanging();
					this._Rueckgabe = value;
					this.SendPropertyChanged("Rueckgabe");
					this.OnRueckgabeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zurueck", DbType="Bit NOT NULL")]
		public bool Zurueck
		{
			get
			{
				return this._Zurueck;
			}
			set
			{
				if ((this._Zurueck != value))
				{
					this.OnZurueckChanging(value);
					this.SendPropertyChanging();
					this._Zurueck = value;
					this.SendPropertyChanged("Zurueck");
					this.OnZurueckChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProfile_Id", DbType="NVarChar(128)")]
		public string UserProfile_Id
		{
			get
			{
				return this._UserProfile_Id;
			}
			set
			{
				if ((this._UserProfile_Id != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserProfile_IdChanging(value);
					this.SendPropertyChanging();
					this._UserProfile_Id = value;
					this.SendPropertyChanged("UserProfile_Id");
					this.OnUserProfile_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Leihes", Storage="_AspNetUsers", ThisKey="UserProfile_Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.Leihes.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.Leihes.Add(this);
						this._UserProfile_Id = value.Id;
					}
					else
					{
						this._UserProfile_Id = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kopies_Leihes", Storage="_Kopies", ThisKey="KopieId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Kopies Kopies
		{
			get
			{
				return this._Kopies.Entity;
			}
			set
			{
				Kopies previousValue = this._Kopies.Entity;
				if (((previousValue != value) 
							|| (this._Kopies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kopies.Entity = null;
						previousValue.Leihes.Remove(this);
					}
					this._Kopies.Entity = value;
					if ((value != null))
					{
						value.Leihes.Add(this);
						this._KopieId = value.Id;
					}
					else
					{
						this._KopieId = default(int);
					}
					this.SendPropertyChanged("Kopies");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Titels")]
	public partial class Titels : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TitelId;
		
		private int _AutorId;
		
		private int _GenreId;
		
		private int _TypId;
		
		private string _Name;
		
		private string _Kurzbeschreibung;
		
		private string _Beschreibung;
		
		private System.DateTime _Erscheinung;
		
		private System.DateTime _Created;
		
		private System.DateTime _Modified;
		
		private string _LastModifiedBy_Id;
		
		private string _CoverPfad;
		
		private string _CreatedBy_Id;
		
		private EntitySet<Kopies> _Kopies;
		
		private EntityRef<AspNetUsers> _AspNetUsers;
		
		private EntityRef<AspNetUsers> _AspNetUsers1;
		
		private EntityRef<Autors> _Autors;
		
		private EntityRef<Genres> _Genres;
		
		private EntityRef<Typs> _Typs;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitelIdChanging(int value);
    partial void OnTitelIdChanged();
    partial void OnAutorIdChanging(int value);
    partial void OnAutorIdChanged();
    partial void OnGenreIdChanging(int value);
    partial void OnGenreIdChanged();
    partial void OnTypIdChanging(int value);
    partial void OnTypIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnKurzbeschreibungChanging(string value);
    partial void OnKurzbeschreibungChanged();
    partial void OnBeschreibungChanging(string value);
    partial void OnBeschreibungChanged();
    partial void OnErscheinungChanging(System.DateTime value);
    partial void OnErscheinungChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnLastModifiedBy_IdChanging(string value);
    partial void OnLastModifiedBy_IdChanged();
    partial void OnCoverPfadChanging(string value);
    partial void OnCoverPfadChanged();
    partial void OnCreatedBy_IdChanging(string value);
    partial void OnCreatedBy_IdChanged();
    #endregion
		
		public Titels()
		{
			this._Kopies = new EntitySet<Kopies>(new Action<Kopies>(this.attach_Kopies), new Action<Kopies>(this.detach_Kopies));
			this._AspNetUsers = default(EntityRef<AspNetUsers>);
			this._AspNetUsers1 = default(EntityRef<AspNetUsers>);
			this._Autors = default(EntityRef<Autors>);
			this._Genres = default(EntityRef<Genres>);
			this._Typs = default(EntityRef<Typs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TitelId
		{
			get
			{
				return this._TitelId;
			}
			set
			{
				if ((this._TitelId != value))
				{
					this.OnTitelIdChanging(value);
					this.SendPropertyChanging();
					this._TitelId = value;
					this.SendPropertyChanged("TitelId");
					this.OnTitelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutorId", DbType="Int NOT NULL")]
		public int AutorId
		{
			get
			{
				return this._AutorId;
			}
			set
			{
				if ((this._AutorId != value))
				{
					if (this._Autors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAutorIdChanging(value);
					this.SendPropertyChanging();
					this._AutorId = value;
					this.SendPropertyChanged("AutorId");
					this.OnAutorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreId", DbType="Int NOT NULL")]
		public int GenreId
		{
			get
			{
				return this._GenreId;
			}
			set
			{
				if ((this._GenreId != value))
				{
					if (this._Genres.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIdChanging(value);
					this.SendPropertyChanging();
					this._GenreId = value;
					this.SendPropertyChanged("GenreId");
					this.OnGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypId", DbType="Int NOT NULL")]
		public int TypId
		{
			get
			{
				return this._TypId;
			}
			set
			{
				if ((this._TypId != value))
				{
					if (this._Typs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypIdChanging(value);
					this.SendPropertyChanging();
					this._TypId = value;
					this.SendPropertyChanged("TypId");
					this.OnTypIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kurzbeschreibung", DbType="NVarChar(MAX)")]
		public string Kurzbeschreibung
		{
			get
			{
				return this._Kurzbeschreibung;
			}
			set
			{
				if ((this._Kurzbeschreibung != value))
				{
					this.OnKurzbeschreibungChanging(value);
					this.SendPropertyChanging();
					this._Kurzbeschreibung = value;
					this.SendPropertyChanged("Kurzbeschreibung");
					this.OnKurzbeschreibungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Beschreibung", DbType="NVarChar(MAX)")]
		public string Beschreibung
		{
			get
			{
				return this._Beschreibung;
			}
			set
			{
				if ((this._Beschreibung != value))
				{
					this.OnBeschreibungChanging(value);
					this.SendPropertyChanging();
					this._Beschreibung = value;
					this.SendPropertyChanged("Beschreibung");
					this.OnBeschreibungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Erscheinung", DbType="DateTime NOT NULL")]
		public System.DateTime Erscheinung
		{
			get
			{
				return this._Erscheinung;
			}
			set
			{
				if ((this._Erscheinung != value))
				{
					this.OnErscheinungChanging(value);
					this.SendPropertyChanging();
					this._Erscheinung = value;
					this.SendPropertyChanged("Erscheinung");
					this.OnErscheinungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy_Id", DbType="NVarChar(128)")]
		public string LastModifiedBy_Id
		{
			get
			{
				return this._LastModifiedBy_Id;
			}
			set
			{
				if ((this._LastModifiedBy_Id != value))
				{
					if (this._AspNetUsers1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedBy_IdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy_Id = value;
					this.SendPropertyChanged("LastModifiedBy_Id");
					this.OnLastModifiedBy_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoverPfad", DbType="NVarChar(MAX)")]
		public string CoverPfad
		{
			get
			{
				return this._CoverPfad;
			}
			set
			{
				if ((this._CoverPfad != value))
				{
					this.OnCoverPfadChanging(value);
					this.SendPropertyChanging();
					this._CoverPfad = value;
					this.SendPropertyChanged("CoverPfad");
					this.OnCoverPfadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy_Id", DbType="NVarChar(128)")]
		public string CreatedBy_Id
		{
			get
			{
				return this._CreatedBy_Id;
			}
			set
			{
				if ((this._CreatedBy_Id != value))
				{
					if (this._AspNetUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedBy_IdChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy_Id = value;
					this.SendPropertyChanged("CreatedBy_Id");
					this.OnCreatedBy_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Titels_Kopies", Storage="_Kopies", ThisKey="TitelId", OtherKey="TitelId")]
		public EntitySet<Kopies> Kopies
		{
			get
			{
				return this._Kopies;
			}
			set
			{
				this._Kopies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Titels", Storage="_AspNetUsers", ThisKey="CreatedBy_Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUsers AspNetUsers
		{
			get
			{
				return this._AspNetUsers.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers.Entity = null;
						previousValue.Titels.Remove(this);
					}
					this._AspNetUsers.Entity = value;
					if ((value != null))
					{
						value.Titels.Add(this);
						this._CreatedBy_Id = value.Id;
					}
					else
					{
						this._CreatedBy_Id = default(string);
					}
					this.SendPropertyChanged("AspNetUsers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUsers_Titels1", Storage="_AspNetUsers1", ThisKey="LastModifiedBy_Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUsers AspNetUsers1
		{
			get
			{
				return this._AspNetUsers1.Entity;
			}
			set
			{
				AspNetUsers previousValue = this._AspNetUsers1.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUsers1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUsers1.Entity = null;
						previousValue.Titels1.Remove(this);
					}
					this._AspNetUsers1.Entity = value;
					if ((value != null))
					{
						value.Titels1.Add(this);
						this._LastModifiedBy_Id = value.Id;
					}
					else
					{
						this._LastModifiedBy_Id = default(string);
					}
					this.SendPropertyChanged("AspNetUsers1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Autors_Titels", Storage="_Autors", ThisKey="AutorId", OtherKey="AutorId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Autors Autors
		{
			get
			{
				return this._Autors.Entity;
			}
			set
			{
				Autors previousValue = this._Autors.Entity;
				if (((previousValue != value) 
							|| (this._Autors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Autors.Entity = null;
						previousValue.Titels.Remove(this);
					}
					this._Autors.Entity = value;
					if ((value != null))
					{
						value.Titels.Add(this);
						this._AutorId = value.AutorId;
					}
					else
					{
						this._AutorId = default(int);
					}
					this.SendPropertyChanged("Autors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genres_Titels", Storage="_Genres", ThisKey="GenreId", OtherKey="GenreId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Genres Genres
		{
			get
			{
				return this._Genres.Entity;
			}
			set
			{
				Genres previousValue = this._Genres.Entity;
				if (((previousValue != value) 
							|| (this._Genres.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genres.Entity = null;
						previousValue.Titels.Remove(this);
					}
					this._Genres.Entity = value;
					if ((value != null))
					{
						value.Titels.Add(this);
						this._GenreId = value.GenreId;
					}
					else
					{
						this._GenreId = default(int);
					}
					this.SendPropertyChanged("Genres");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Typs_Titels", Storage="_Typs", ThisKey="TypId", OtherKey="TypId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Typs Typs
		{
			get
			{
				return this._Typs.Entity;
			}
			set
			{
				Typs previousValue = this._Typs.Entity;
				if (((previousValue != value) 
							|| (this._Typs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Typs.Entity = null;
						previousValue.Titels.Remove(this);
					}
					this._Typs.Entity = value;
					if ((value != null))
					{
						value.Titels.Add(this);
						this._TypId = value.TypId;
					}
					else
					{
						this._TypId = default(int);
					}
					this.SendPropertyChanged("Typs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Kopies(Kopies entity)
		{
			this.SendPropertyChanging();
			entity.Titels = this;
		}
		
		private void detach_Kopies(Kopies entity)
		{
			this.SendPropertyChanging();
			entity.Titels = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Typs")]
	public partial class Typs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypId;
		
		private string _Name;
		
		private string _Beschreibung;
		
		private EntitySet<Titels> _Titels;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypIdChanging(int value);
    partial void OnTypIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBeschreibungChanging(string value);
    partial void OnBeschreibungChanged();
    #endregion
		
		public Typs()
		{
			this._Titels = new EntitySet<Titels>(new Action<Titels>(this.attach_Titels), new Action<Titels>(this.detach_Titels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypId
		{
			get
			{
				return this._TypId;
			}
			set
			{
				if ((this._TypId != value))
				{
					this.OnTypIdChanging(value);
					this.SendPropertyChanging();
					this._TypId = value;
					this.SendPropertyChanged("TypId");
					this.OnTypIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Beschreibung", DbType="NVarChar(MAX)")]
		public string Beschreibung
		{
			get
			{
				return this._Beschreibung;
			}
			set
			{
				if ((this._Beschreibung != value))
				{
					this.OnBeschreibungChanging(value);
					this.SendPropertyChanging();
					this._Beschreibung = value;
					this.SendPropertyChanged("Beschreibung");
					this.OnBeschreibungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Typs_Titels", Storage="_Titels", ThisKey="TypId", OtherKey="TypId")]
		public EntitySet<Titels> Titels
		{
			get
			{
				return this._Titels;
			}
			set
			{
				this._Titels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Titels(Titels entity)
		{
			this.SendPropertyChanging();
			entity.Typs = this;
		}
		
		private void detach_Titels(Titels entity)
		{
			this.SendPropertyChanging();
			entity.Typs = null;
		}
	}
}
#pragma warning restore 1591
